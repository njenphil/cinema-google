// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String
    
 
  
  
  email         String        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  //Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  //sshows Show[]
  
  purchases Purchase[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
// Optional for WebAuthn support


model SafcomResponse {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  merchantRequestID String
  resultDesc String
  mpesaCode String?
}

model Payment {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  phoneNumber String?
  merchantRequestID String
  resultDesc String
  mpesaCode String?
  amount String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Show {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  title String @unique
  quality String
  qualityInWords String
  restriction String
  release String
  thumbnail String
  videoCode String
  price String
  urlTitle String
  trailer String
  mainVideo String
  showDescription String
  playtime String
  categoryName String?
  category Category? @relation(fields: [categoryName], references: [categoryName])
  purchases Purchase[]
  //user User? @relation(fields: [userPhone], references: [phone])
  userPhone String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category{
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  categoryName String @unique
  shows Show[]
  showIDs String[] @db.ObjectId
  categoryImage String
  categoryDescription String
}

model Purchase{
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  purchasedOn DateTime @default(now())
  user User? @relation(fields: [userEmail], references: [email])
  userEmail String
  mpesaCode String
  show Show? @relation(fields: [videoTitle], references: [title])
  videoTitle String
}
